package org.tesis.dbeditor;

import java.awt.GridLayout;
import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.tesis.changelog.property.PropertyList;
import org.tesis.changelog.tag.DataColumnTag;
import org.tesis.changelog.tag.RestoreDataTag;
import org.tesis.changelog.tag.TagList;
import org.tesis.db.Column;
import org.tesis.db.Constants;
import org.tesis.db.DataColumn;
import org.tesis.db.DataFilterCriteria;
import org.tesis.db.DataRow;
import org.tesis.db.Table;
import org.tesis.db.dbms.Dbms;
import org.tesis.dbapi.Author;
import org.tesis.dbapi.Message;
import org.tesis.dbapi.MyLogger;
import org.tesis.mybase.DataColumnList;
import org.tesis.ui.DataTableRestorer;
import org.tesis.ui.WindowManager;
import org.tesis.util.Utils;
import org.tesis.ui.DataFilter;
/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.tesis.dbeditor//RestoreData//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "RestoreDataTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.tesis.dbeditor.RestoreDataTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_RestoreDataAction",
        preferredID = "RestoreDataTopComponent"
)
@Messages({
    "CTL_RestoreDataAction=RestoreData",
    "CTL_RestoreDataTopComponent=Restauración de Datos",
    "HINT_RestoreDataTopComponent=Esta es la pantalla de Restauración de Datos"
})
public final class RestoreDataTopComponent extends TopComponent {
    private final InstanceContent content= new InstanceContent();
    private Table table;
    private Author author;
    private Dbms dbms;
    DataTableRestorer dataTableRestorer;
    public RestoreDataTopComponent() {
        initComponents();
        associateLookup(new AbstractLookup(content));
        setName(Bundle.CTL_RestoreDataTopComponent());
        setToolTipText(Bundle.HINT_RestoreDataTopComponent());

    }
    public void setTable(Table table) {
        this.table = table;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

    public void setDbms(Dbms dbms) {
        this.dbms = dbms;
    }

    public Table getTable() {
        return table;
    }

    public Author getAuthor() {
        return author;
    }

    public Dbms getDbms() {
        return dbms;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfirmButton = new javax.swing.JButton();
        panelContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(ConfirmButton, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.ConfirmButton.text")); // NOI18N
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        panelContainer.setBackground(new java.awt.Color(240, 240, 0));
        panelContainer.setMinimumSize(new java.awt.Dimension(800, 500));

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jPanel1.border.title"))); // NOI18N
        jPanel1.setToolTipText(org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.toolTipText")); // NOI18N
        jPanel1.setName(""); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jLabel2.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jTextField2.text")); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jTextField1.setText(org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jTextField1.text")); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(RestoreDataTopComponent.class, "RestoreDataTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ConfirmButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addGap(0, 307, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 109, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmButton)
                    .addComponent(jButton2)))
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        //this.dataTableRestorer.printResults();
        TagList tags=this.generateTags();
        content.set(Collections.singleton(tags), null);//agrega al lookup
        content.remove(tags);//borra el Tag de content porque sino vuelve a agregarlo al lookup al volver a esta ventana
        MyLogger.LogInformationMessage("Éxito al guardar Restored DataTags en el lookup.", "RestoreDataTopComponent");
        //this.dataTableRestorer= new DataTableRestorer(this.getTable(), null);
        this.close();
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            this.refreshData();
        } catch (Exception ex) {
            ex.printStackTrace();
            Message.showErrorMessage("Ha ocurrido un error al intentar cargar la tabla de datos borrados. Descripción: "+ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if(DataFilterCriteria.valueOf(evt.getItem().toString()).getNumberOfFields()==1){
            jTextField2.setVisible(false);
        }else{
            jTextField2.setVisible(true);
        }
        validate();
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        for(Column c:this.table.getColumns()){
            if(c.getName().equals(evt.getItem().toString())){
                DataFilterCriteria[] dfcs=c.getType().getAvailableDataFilterCriteriaList();
                this.jComboBox2.removeAllItems();
                for(DataFilterCriteria dfc:dfcs){
                    this.jComboBox2.addItem(dfc);
                }
            }
        }
        validate();
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            this.showAllData();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel panelContainer;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        WindowManager.closeEditorComponentsWithException(this);
        try {
            dataTableRestorer= new DataTableRestorer(this.getTable(), null);
        } catch (Exception ex) {
            ex.printStackTrace();
            Message.showErrorMessage("Ha ocurrido un error al intentar cargar la tabla de datos borrados. Descripción: "+ex.getMessage());
        }
        panelContainer.setLayout(new GridLayout(0, 1));
        panelContainer.removeAll();
        panelContainer.add(dataTableRestorer);
        dataTableRestorer.setVisible(true);
        //dataTableRestorer.setMinimumSize(new Dimension(1300, 1200));
        panelContainer.revalidate();
        if(this.jComboBox1.getItemCount()>0){
           this.jComboBox1.removeAllItems();
        }
        for(Column c:this.table.getColumns()){
            this.jComboBox1.addItem(c.getName());
        }
        /*for(DataFilterCriteria fc:DataFilterCriteria.values()){
            this.jComboBox2.addItem(fc);
        }*/
        validate();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    public void initEditor() {
        try {
            dataTableRestorer= new DataTableRestorer(this.getTable(),null);
        } catch (Exception ex) {
            ex.printStackTrace();
            Message.showErrorMessage("Ha ocurrido un error al intentar cargar la tabla de datos borrados. Descripción: "+ex.getMessage());
        }
        this.panelContainer.add(dataTableRestorer.getJTable());
        dataTableRestorer.setVisible(true);
        panelContainer.revalidate();
        validate();
    }
    public void refreshData() throws Exception {
        String col=this.jComboBox1.getSelectedItem().toString();
        DataFilter dataFilter=new DataFilter(col, this.table.getColumnByName(col).getType(), DataFilterCriteria.valueOf(this.jComboBox2.getSelectedItem().toString()), this.jTextField1.getText(), this.jTextField2.getText());
        dataTableRestorer= new DataTableRestorer(this.getTable(),dataFilter);        
        panelContainer.removeAll();
        panelContainer.add(dataTableRestorer);
        dataTableRestorer.setVisible(true);
        panelContainer.revalidate();
        validate();
    }
    public void showAllData() throws Exception {
        dataTableRestorer= new DataTableRestorer(this.getTable(),null);        
        panelContainer.removeAll();
        panelContainer.add(dataTableRestorer);
        dataTableRestorer.setVisible(true);
        panelContainer.revalidate();
        validate();
    }
    public TagList generateTags(){
        TagList tags=new TagList();
        try{
            //Remove Data
            for(DataRow row:this.dataTableRestorer.getRemovedRows()){
                PropertyList props=new PropertyList();
                props.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                props.addProperty(Constants.PROPERTY_OLD_INTERNAL_ID, row.getInternalId());
                props.addProperty(Constants.PROPERTY_TABLE_NAME, row.getTableName());
                props.addProperty(Constants.PROPERTY_AUTHOR, this.getAuthor().getAuthorName());
                props.addProperty(Constants.PROPERTY_DATE, Utils.getCurrentDate());
                
                DataColumnList dcl2=new DataColumnList();
                for(DataColumn dc:row.getDataColumns()){
                    PropertyList props2=new PropertyList();
                    props2.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                    props2.addProperty(Constants.PROPERTY_NAME, dc.getColumnName());
                    props2.addProperty(Constants.PROPERTY_VALUE, dc.getValue());
                    props2.addProperty(Constants.PROPERTY_QUOTED, Boolean.toString(dc.isQuoted()));
                    dcl2.addDataColumn(new DataColumnTag(props2, dbms));
                }
                tags.addTag(new RestoreDataTag(props, dcl2, dbms));
            }
        }catch(Exception ex){
            MyLogger.LogErrorMessage(ex);
            Message.showErrorMessage("Error al exportar datos de DataTableRestorer. "+ex.getMessage());
        }
        return tags;
    }
}
