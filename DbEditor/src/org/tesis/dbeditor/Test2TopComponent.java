/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tesis.dbeditor;

import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.tesis.changelog.property.PropertyList;
import org.tesis.changelog.tag.DataColumnTag;
import org.tesis.changelog.tag.InsertDataTag;
import org.tesis.changelog.tag.TagList;
import org.tesis.changelog.tag.TestTag;
import org.tesis.db.Constants;
import org.tesis.db.Table;
import org.tesis.db.dbms.Dbms;
import org.tesis.dbapi.Author;
import org.tesis.exception.InvalidPropertyException;
import org.tesis.exception.InvalidValueException;
import org.tesis.mybase.DataColumnList;
import org.tesis.util.Utils;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.tesis.dbeditor//Test2//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "Test2TopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.tesis.dbeditor.Test2TopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_Test2Action",
        preferredID = "Test2TopComponent"
)
@Messages({
    "CTL_Test2Action=Test2",
    "CTL_Test2TopComponent=Test2 Window",
    "HINT_Test2TopComponent=This is a Test2 window"
})
public final class Test2TopComponent extends TopComponent {
    private final InstanceContent content= new InstanceContent();
    private Dbms dbms;
    public Test2TopComponent() {
        initComponents();
        associateLookup(new AbstractLookup(content));
        setName(Bundle.CTL_Test2TopComponent());
        setToolTipText(Bundle.HINT_Test2TopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(Test2TopComponent.class, "Test2TopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jButton1)
                .addContainerGap(256, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
        PropertyList properties=new PropertyList();
        properties.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
        properties.addProperty(Constants.PROPERTY_TABLE_NAME, /*table.getName()*/"ss");
        properties.addProperty(Constants.PROPERTY_AUTHOR, /*this.getAuthor().getAuthorName()*/"dd");
        properties.addProperty(Constants.PROPERTY_DATE, Utils.getCurrentDate());
        DataColumnList dataColumns=new DataColumnList();
        PropertyList props=new PropertyList();
        props.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
        props.addProperty(Constants.PROPERTY_NAME, "id");
        props.addProperty(Constants.PROPERTY_VALUE, "1");
        dataColumns.addDataColumn(new DataColumnTag(props, dbms));
        
        props=new PropertyList();
        props.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
        props.addProperty(Constants.PROPERTY_NAME, "str_col");
        props.addProperty(Constants.PROPERTY_VALUE, "CONTENIDO DE LA COLUMNA");
        dataColumns.addDataColumn(new DataColumnTag(props, dbms));
        InsertDataTag insertDataTag=new InsertDataTag(properties, dataColumns, null/*this.getDbms()*/);
        TagList tags=new TagList();
        tags.addTag(insertDataTag);
        content.set(Collections.singleton(tags), null);//agrega al lookup
        content.remove(tags);//borra el Tag de content porque sino vuelve a agregarlo al lookup al volver a esta ventana
        }catch(InvalidPropertyException e1){
            e1.printStackTrace();
        }catch(InvalidValueException e2){
            e2.printStackTrace();
        }catch(Exception e3){
            e3.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
