/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tesis.dbeditor;

import java.awt.GridLayout;
import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.tesis.changelog.property.PropertyList;
import org.tesis.changelog.tag.DataColumnTag;
import org.tesis.changelog.tag.EditDataTag;
import org.tesis.changelog.tag.InsertDataTag;
import org.tesis.changelog.tag.RemoveDataTag;
import org.tesis.changelog.tag.TagList;
import org.tesis.db.Constants;
import org.tesis.db.DataColumn;
import org.tesis.db.DataRow;
import org.tesis.db.Table;
import org.tesis.db.dbms.Dbms;
import org.tesis.dbapi.Author;
import org.tesis.dbapi.Message;
import org.tesis.dbapi.MyLogger;
import org.tesis.mybase.DataColumnList;
import org.tesis.ui.DataTableEditor;
import org.tesis.ui.WindowManager;
import org.tesis.util.Utils;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.tesis.dbeditor//InsertData//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "InsertDataTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.tesis.dbeditor.InsertDataTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_InsertDataAction",
        preferredID = "InsertDataTopComponent"
)
@Messages({
    "CTL_InsertDataAction=InsertData",
    "CTL_InsertDataTopComponent=Gestion de Datos",
    "HINT_InsertDataTopComponent=Esta es la pantalla de Gestión de Datos"
})
public final class InsertDataTopComponent extends TopComponent {
    private final InstanceContent content= new InstanceContent();
    private Table table;
    private Author author;
    private Dbms dbms;
    DataTableEditor dataTableEditor;
    
    public InsertDataTopComponent() {
        initComponents();
        associateLookup(new AbstractLookup(content));
        setName(Bundle.CTL_InsertDataTopComponent());
        setToolTipText(Bundle.HINT_InsertDataTopComponent());

    }
    public void setTable(Table table) {
        this.table = table;
    }

    public void setAuthor(Author author) {
        this.author = author;
    }

    public void setDbms(Dbms dbms) {
        this.dbms = dbms;
    }

    public Table getTable() {
        return table;
    }

    public Author getAuthor() {
        return author;
    }

    public Dbms getDbms() {
        return dbms;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfirmButton = new javax.swing.JButton();
        panelContainer = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(ConfirmButton, org.openide.util.NbBundle.getMessage(InsertDataTopComponent.class, "InsertDataTopComponent.ConfirmButton.text")); // NOI18N
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContainerLayout = new javax.swing.GroupLayout(panelContainer);
        panelContainer.setLayout(panelContainerLayout);
        panelContainerLayout.setHorizontalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelContainerLayout.setVerticalGroup(
            panelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ConfirmButton)
                        .addGap(0, 301, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfirmButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        //this.dataTableEditor.printResults();
        if(this.dataTableEditor.validateAllValues()==0){
            TagList tags=this.generateTags();
            content.set(Collections.singleton(tags), null);//agrega al lookup
            content.remove(tags);//borra el Tag de content porque sino vuelve a agregarlo al lookup al volver a esta ventana
            MyLogger.LogInformationMessage("Éxito al guardar el DataTags en el lookup.", "InsertDataTopComponent");
            this.close();
        }else{
            System.err.println("Hubo errores de validación.");
        }
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JPanel panelContainer;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        WindowManager.closeEditorComponentsWithException(this);
        dataTableEditor= new DataTableEditor(this.getTable());
        panelContainer.setLayout(new GridLayout(0, 1));
        panelContainer.removeAll();
        panelContainer.add(dataTableEditor);
        dataTableEditor.setVisible(true);
        panelContainer.revalidate();
        validate();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    public void initEditor() {
        dataTableEditor= new DataTableEditor(this.getTable());
        this.panelContainer.add(dataTableEditor.getJTable());
        dataTableEditor.setVisible(true);
        panelContainer.revalidate();
        validate();
    }
    public TagList generateTags(){
        TagList tags=new TagList();
        try{
            //Remove Data
            for(DataRow row:this.dataTableEditor.getRemoveDataList().getDataRows()){
                /*agregado desde aca
                for(Table t:relatedTablesWithFK){//sacar esta variable de table, para eso hay que setear esta lista al agregar/borrar/editar un fk
                    for(ForeignKey fk:t.getForeignKeys().getForeignKeys()){
                        if(this.table.getName().equals(fk.getForeignTable().getName())){
                            for(DataRow dr:fk.getForeignTable().getRows()){
                                String colVal=row.getDataColumnByName(fk.getColumn().getName()).getValue();
                                if(colVal!=null){
                                    if(colVal.equals(dr.getDataColumnByName(fk.getColumn().getName()).getValue())){
                                        throw new InvalidForeignKeyException("La fila con columna "+fk.getColumn().getName()+" con valor = "+colVal+" no puede ser borrada porque es utilizada como FK en la tabla "+t.getName());
                                    }
                                }
                            }
                        }
                    }
                }
                hasta aca*/
                PropertyList props=new PropertyList();
                props.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                props.addProperty(Constants.PROPERTY_TABLE_NAME, row.getTableName());
                props.addProperty(Constants.PROPERTY_AUTHOR, this.getAuthor().getAuthorName());
                props.addProperty(Constants.PROPERTY_DATE, Utils.getCurrentDate());
                props.addProperty(Constants.PROPERTY_INTERNAL_ID, row.getInternalId());
                /*DataPKList pks = new DataPKList();
                for(PK pk:row.getPks().getPKs()){
                    PropertyList props2=new PropertyList();
                    props2.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                    props2.addProperty(Constants.PROPERTY_COLUMN_NAME, pk.getColumnName());
                    props2.addProperty(Constants.PROPERTY_VALUE, pk.getValue());
                    props2.addProperty(Constants.PROPERTY_QUOTED, Boolean.toString(pk.isQuoted()));
                    pks.addPKTag(new PKTag(props2, dbms));
                }*/
                tags.addTag(new RemoveDataTag(props, dbms));
            }
        
            //EditData
            for(DataRow row:this.dataTableEditor.getEditDataList().getDataRows()){
                PropertyList props=new PropertyList();
                props.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                props.addProperty(Constants.PROPERTY_TABLE_NAME, row.getTableName());
                props.addProperty(Constants.PROPERTY_AUTHOR, this.getAuthor().getAuthorName());
                props.addProperty(Constants.PROPERTY_DATE, Utils.getCurrentDate());
                props.addProperty(Constants.PROPERTY_INTERNAL_ID, row.getInternalId());
                /*DataPKList pks = new DataPKList();
                for(PK pk:row.getPks().getPKs()){
                    PropertyList props2=new PropertyList();
                    props2.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                    props2.addProperty(Constants.PROPERTY_COLUMN_NAME, pk.getColumnName());
                    props2.addProperty(Constants.PROPERTY_VALUE, pk.getValue());
                    props2.addProperty(Constants.PROPERTY_QUOTED, Boolean.toString(pk.isQuoted()));
                    pks.addPKTag(new PKTag(props2, dbms));
                }*/
                DataColumnList dcl=new DataColumnList();
                for(DataColumn dc:row.getDataColumns()){
                    PropertyList props3=new PropertyList();
                    props3.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                    props3.addProperty(Constants.PROPERTY_NAME, dc.getColumnName());
                    props3.addProperty(Constants.PROPERTY_VALUE, dc.getValue());
                    props3.addProperty(Constants.PROPERTY_QUOTED, Boolean.toString(dc.isQuoted()));
                    dcl.addDataColumn(new DataColumnTag(props3, dbms));
                }
                tags.addTag(new EditDataTag(props, dcl, dbms));
            }
            //Add Data
            for(DataRow row:this.dataTableEditor.getAddDataList().getDataRows()){
                PropertyList props=new PropertyList();
                props.addProperty(Constants.PROPERTY_ID, row.getInternalId());
                props.addProperty(Constants.PROPERTY_TABLE_NAME, row.getTableName());
                props.addProperty(Constants.PROPERTY_AUTHOR, this.getAuthor().getAuthorName());
                props.addProperty(Constants.PROPERTY_DATE, Utils.getCurrentDate());
                
                DataColumnList dcl2=new DataColumnList();
                for(DataColumn dc:row.getDataColumns()){
                    PropertyList props3=new PropertyList();
                    props3.addProperty(Constants.PROPERTY_ID, Long.toString(Utils.generateUniqueID()));
                    props3.addProperty(Constants.PROPERTY_NAME, dc.getColumnName());
                    props3.addProperty(Constants.PROPERTY_VALUE, dc.getValue());
                    props3.addProperty(Constants.PROPERTY_QUOTED, Boolean.toString(dc.isQuoted()));
                    dcl2.addDataColumn(new DataColumnTag(props3, dbms));
                }
                tags.addTag(new InsertDataTag(props, dcl2, dbms));
            }
            
        }catch(Exception ex){
            MyLogger.LogErrorMessage(ex);
            Message.showErrorMessage("Error al exportar datos de DataTableEditor. "+ex.getMessage());
        }
        return tags;
    }
}
